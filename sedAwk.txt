6.1.1.1 Converting an Interleaf file


sed 's/ MA/, Massachusetts/g' l1.txt
# Find and eplace MA with , Massachusetts
# s/ substitute
#  MA string literal to search for
# , Massachusetts string to substitute
# g/ global replace

sed 's/ MA/, Massachusetts/g; s/ PA/, Pennsylvania/' l1.txt

sed 's/ MA/, Massachusetts/g; s/ PA/, Pennsylvania/g; s/ VA/, Virginia/g; s/ OK/, Oklahoma/g; s/ CA/, California/g' l1.txt

# ; links the commands together 

sed -n -e 's/ MA/, Massachusetts/p' l1.txt
# -n Suppress automatic output of input lines.
# /p print command

sed -f scriptFile l1.txt


awk '{ print $2 }' l1.txt
# print $2 refers to the value of the second field on each input line

awk '{ print $0 }' l1.txt
# print $0 prints the entire file

awk '/MA/' l1.txt
# /MA/ prints all the lines with MA in it

awk '/MA/ { print $1 } ' l1.txt
# /MA/ finds all the lines with MA in it
# print $1 print statement to limit the output to the first field of each record

awk -F, '/MA/ { print $1 } ' l1.txt
# -F option to change the field separator to a comma
# print $1 print statement to limit the output to the first field of each record seperated by a comma

awk -F, '{ print $1; print $2; print $3 }' l1.tomma
# ; Multiple commands are separated by semicolonsxt 
# -F option to change the field separator to a c

sed -f scriptFile  l1.txt | awk -F, '{ print $4 }'
# -f add the contents of script-file to the commands to be executed
# -F, option to change the field separator to a comma
# print $4 print statement to limit the output to the forth field of each record

sed -f scriptFile  l1.txt | awk -F, '{ print $4 }' | sort
# sort piping to sort aranges the output alphabetically 

sed -f scriptFile  l1.txt | awk -F, '{ print $4 }' | sort | uniq
# uniq only displays results that are not repeats

sed -f scriptFile  l1.txt | awk -F, '{ print $4 }' | sort | uniq -c
# uniq -c counts the occurance of each state


sed -f scriptFile l1.txt | ./e1.sh



sed -f scriptFile  l1.txt | awk -F, '{ print $4 ", " $0 }'

grep "can[ no']*t" l2.txt
# * The ability to match "zero or more" of something is known by the technical term "closure."

grep "[0-9]\{1\}[-.][0-9]\{3\}[-.][0-9]\{3\}[-.][0-9]\{4\}" phoneNum.txt
# [0-9] A numerical characters class that includes 0,1,2,3,4,5,6,7,8,9
# [-.] A character class of - or .
# \{1\} repeat the number character class once
# \{3\} repeat the number character class three times
# \{4\} repeat the number character class four times


./gres '"[^"]*"' 'QUOTES' withQuotes.txt
# global find and replace sript

sed 's/\([0-9][0-9]*\)\.\{5,\}\([0-9][0-9]*\)/\1-\2/g' removeDots.txt
# ( ) around the numerical class with store the values in a variable
# [0-9] A numerical characters class that includes 0,1,2,3,4,5,6,7,8,9
# * match "zero or more" of numerical class 
# \. escapes the dot
# {5,\} a minumun of 5  dots must be matched
# \1 uses the first match atom
# - is the character between the matched atoms
# \2 uses the second match atom
# g means global

sed '/MA/d' l1.txt
# MA the string literal to search for
# /d removes all the lines that have MA 

sed '3,$d' l1.txt
# remove lines starting from the 3rd line to the last

sed '2d' l1.txt
# remove the second line

sed '1,3d' l1.txt
# 1,3 removes a range of lines from the 1st line to the third line

sed -n '1,3p' l1.txt
# 1,3p print 1st line to the 3rd

sed 's/^$/.LP/' horseF.txt
# ^$ find anyline that is empty
# .LP is the string literal being replace.  The dot does not need to be escape when in the replacement section

sed 's/,/ SECOND COMMA/2' l1.txt
# 

sed -f e3 l1.txt 
# Formats the address on three lines

sed -f e5 l1.txt
# Format only address that have VA in them.

echo Regex as a variable | sed 's/as a/(&)/'
# as a << is the string literal
# ( ) will go around the found values stored in the regex variable
# & stores the value found in the regex

sed 's/\([[:alpha:]]* [[:alpha:]]*\), \([[:digit:]]\{1,\}\)/\2, \1,/' l1.txt
# switching names with number of the address

sed 's/\([[:alpha]]*\)/X\2X/' l1.txt

echo "first:last" | sed 's/\(.*\):\(.*\)/\2:\1/'

sed '/Hubert Sims/i\INSERTING BEFORE Hubert\' l1.txt
# Hubert Sims string literal to search for
# i\ insert before the following after Hibert Sims
# INSERTING AFTER Hubert << string literal to insert before 

sed '/Hubert Sims/a\INSERTING AFTER Hubert\' l1.txt
# Hubert Sims string literal to search for
# a\ append the following after Hibert Sims
# INSERTING AFTER Hubert << string literal to append


sed '/^Hubert/,/Mountain View CA$/c\
TWO LINES \
REMOVED' l1.txt
# Change command example accepts a range of lines
# ^ line starts with
# Hubert string literal to search for
# , separator for the range
# / start of the ending range declaration
# Mountain View CA << string literal
# $ end of line
# / end of the ending range declaration
# c\ change command
# TWO LINES first lines of string literal to replace
# \ line break
# REMOVED second line of string literal to replace


sed 'y/abcdefghijklmnopqrstuv/ABCDEFGHIJKLMNOPQRSTUV/' l1.txt
# transform command example
# y delcares transform
# abc... are treated as seperate characters
# ABC... are matched exactly with whatever is in the same location and replaced it 

sed '/.*/!d;=' l1.txt | sed 'N;s/\n/:/'
# Print Line Number

sed '/^Amy/r l2.txt' l1.txt
# Find this in one file and insert the content of another file there
# ^ start with
# Amy string literal
# r "The read command reads the contents of file into the pattern space after the addressed line." ~ Dale Dougherty, Arnold Robbins-sed & awk
# l2.txt is the file we are search for the pattern in
# l1.txt is the file contents we will use whne we find the pattern "Amy" in l2.txt

sed '/VA$/w VAAddresses.txt' l1.txt
# VA string literal we are searching for
# $ check if string literal is at the end of the line
# w write command, will open or create a file and replace all contents with new


sed -f e5 l1.txt
# This will search for all the lines that end with VA and remove the VA and write the output to the file VAAddressesNOVA.txt


echo "One two 333 three four five 666 six seven" | sed -n '/\(\w\)/\1/p'

sed -f e6 l1.txt


] LINKS [
https://likegeeks.com/sed-linux/#Read-DataFrom-a-File
http://gilmation.com/articles/regexp-keeping-parts-of-a-pattern-in-sed/
https://www.commandlinefu.com/commands/view/10163/remove-a-range-of-lines-from-a-file
https://www.poftut.com/awk-if-if-else-else-statement-or-conditional-statements/
https://www.cyberciti.biz/faq/how-to-use-sed-to-find-and-replace-text-in-files-in-linux-unix-shell/



